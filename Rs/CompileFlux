#!/usr/local/bin/Rscript

# Input arguments directory ----
if (!suppressMessages(suppressWarnings(require('argparse', character.only=TRUE, quietly=TRUE)))) {
    install.packages('argparse')
}
suppressMessages(suppressWarnings(require(argparse, quietly=TRUE)))
parser <- ArgumentParser()
parser$add_argument("-n", "--name", type="character",
                    help="The name of globular cluster with white space (e.g., '47 Tuc')")
parser$add_argument("-f", "--fluxdir", type="character", default="fluxes_xspowerlaw.p1/", 
                    help = "A directory name that contains '.flux' files to construct data [default %(default)s]")
parser$add_argument("-v","--vary", default=TRUE, type="logical",
                    help="Whether 'glvary' run or not [default %(default)s]")
parser$add_argument("-m", "--matchcsv", type="character", default=NULL, 
                    help = "Try: matched_output/matched_sourcetypes_*.csv")
parser$add_argument("-s", "--sigmacsv", type="character", default=NULL, 
                    help = "Try: Signif.csv")
parser$add_argument("-o", "--outfile", type="character", default=NULL, 
                    help = "Output csv file name (Default: 'DataSet_{GCNAME}.csv'")
args <- parser$parse_args()
GCname  <- args$name
fluxdir <- args$fluxdir
vary    <- args$vary
matchcsv <- args$matchcsv
sigmacsv <- args$sigmacsv
outfile <- args$outfile
label_column <- "source_type"
signif_column <- "SRC_SIGNIFICANCE"


# Check fluxes/ directory ----
if (!file.exists(fluxdir)) {
    stop("(Error) fluxes/ directory does not exist")
}


# Check matched_output/ directory ----
if (!is.null(matchcsv)) {
    matched.file <- Sys.glob(matchcsv)
    if ( length(matched.file) == 0 ) {
        stop("(ERROR) matched_output/matched_sourcetypes_*.csv file does not exist")
    }  
} else {
    matched.file <- NULL
}

# Check Signif.csv ----
if (!is.null(sigmacsv)) {
    signif.file <- Sys.glob(sigmacsv)
    if ( length(signif.file) == 0 ) {
        stop("(ERROR) sigmacsv file does not exist")
    }  
} else {
    signif.file <- NULL
}

# Load libraries ----
options(tidyverse.quiet = TRUE)
package.list <- list("FITSio", "tidyverse", "reshape2", "rlist", "celestial")
installed <- unlist(lapply(package.list, function(pkg) invisible(suppressMessages(suppressWarnings(require(pkg, character.only=TRUE, quietly=TRUE))))))
if (!all(installed)) {
    lapply(package.list[!installed], install.packages)
}
invisible(sapply(package.list, function(pkg) suppressMessages(suppressWarnings(require(pkg, character.only=TRUE, quietly=TRUE)))))


# =============================== Function bin =================================
# Angular distance computing function
Angdist <- function(a, b) {
    # a, b: coordinate vector named with "ra" and "dec" (unit of degree)
    a_ra  <- as.numeric(a['ra'])*(pi/180)
    a_dec <- as.numeric(a['dec'])*(pi/180)
    b_ra  <- as.numeric(b['ra'])*(pi/180)
    b_dec <- as.numeric(b['dec'])*(pi/180)
    
    theta <- acos( sin(a_dec)*sin(b_dec) + cos(a_dec)*cos(b_dec)*cos(a_ra - b_ra) )
    names(theta) <- NULL
    return(as.numeric(theta)) # return value has unit of radian
}

# Radian to arcsec
rad2arcsec <- function(x) {
    x * (180/pi) * 3600
}

# Physical distance in the unit of pc
Phydist <- function(ang, D) {
    # D (R_sun) has a unit of kpc
    rr <- 1e3*D              # in unit of pc
    theta <- rad2arcsec(ang) # in unit of arcsec
    ll <- rr*theta           # in unit of AU
    ll * 648000/pi # (= 206264.8)
}

# Read fits BINTABLE
read.fits <- function(fits) {
    message('├──▶ Loading: ', fits)
    # Read energy band
    band <- strsplit(fits, "\\_|.flux")[[1]][grepl("-", strsplit(fits, "\\_|.flux")[[1]])]
    
    fits <- readFITS(fits)
    names(fits$col) <- fits$colNames
    table <- list.cbind(fits$col) %>% as.data.frame() %>% distinct(COMPONENT, .keep_all=TRUE)
    
    for (col in colnames(table)) {
        table[,col] <- as.numeric(table[,col])
    }
    
    comment(table) <- band
    return(table)
}

# Alert for missing parameters from Harris Catalog (2010)
missingParam <- function(GCname, param) {
    tryCatch({
        message("├──▶ ",param," = ",round(eval.parent(parse(text=param)),2)," is found",sep='')
    },
    error = function(err) stop("(Error) ",param, " is missing in Harris Catalog (2010) for ", GCname, "...")
    )
}

# Pre-process for .flux file
PreProcFlux <- function(table) {
    # Assign column names we require
    merged.cond <<- any(grepl("MERGED",colnames(table)))
    if ( merged.cond ) {
        fitted_cols <- c("grp_counts", 
                         "nH", "PhoIndex", "norm", 
                         "reduced_statistic", "fit_statistic", "dof")
        freeflux_cols <- c("MERGED_NET_UMFLUX_APER",
                           "MERGED_NET_UMFLUX_APER_LO",
                           "MERGED_NET_UMFLUX_APER_HI")
        fixflux_cols <- c("sample_flux", "sample_flux_lo", "sample_flux_hi")
        pos_cols <- c("RAPOS", "DECPOS", "NUM_OBI", "TOTAL_COUNTS")
    } else {
        fitted_cols <- c("grp_counts", 
                         "nH", "PhoIndex", "norm", 
                         "reduced_statistic", "fit_statistic", "dof")
        freeflux_cols <- c("NET_UMFLUX_APER",
                           "NET_UMFLUX_APER_LO",
                           "NET_UMFLUX_APER_HI")
        fixflux_cols <- c("sample_flux", "sample_flux_lo", "sample_flux_hi")
        pos_cols <- c("RAPOS", "DECPOS", "COUNTS")
    }
    
    # Filter df and rename
    fluxes <- table |> 
        select(all_of(c(pos_cols, 
                        freeflux_cols, 
                        fixflux_cols, 
                        fitted_cols))) |> 
        rename(grp1_counts = grp_counts,
               reduce_stat = reduced_statistic,
               fitted_stat = fit_statistic) |> 
        rename(uF_free    = freeflux_cols[1],
               uF_free_lo = freeflux_cols[2],
               uF_free_hi = freeflux_cols[3]) |> 
        rename(uF_fix     = fixflux_cols[1],
               uF_fix_lo  = fixflux_cols[2],
               uF_fix_hi  = fixflux_cols[3])
    
    return(fluxes)
}

# Simple conversion
Fx2Lx <- function(Fx, D) {
    pc2cm <- 3.086e+18              # 1 pc = 3.086e18 cm
    Fx * 4*pi * ( 1e3*D * pc2cm )^2 # D in kpc
}

# Calcluating luminosities
ProcLum <- function(fx, R_sun) {
    suffix <- switch(
        comment(fx),
        "0.3-1.5" = "s",
        "1.5-7.0" = "h",
        "0.3-7.0" = "f")
    Lxcols <- c("uL_free","uL_free_lo","uL_free_hi",
                "uL_fix","uL_fix_lo","uL_fix_hi")
    fx |> 
        # Calculate Luminosity with R_sun
        mutate(uF_free    = Fx2Lx(uF_free,    R_sun), .before=grp1_counts) |> 
        mutate(uF_free_lo = Fx2Lx(uF_free_lo, R_sun), .before=grp1_counts) |> 
        mutate(uF_free_hi = Fx2Lx(uF_free_hi, R_sun), .before=grp1_counts) |> 
        
        mutate(uF_fix     = Fx2Lx(uF_fix,     R_sun), .before=grp1_counts) |> 
        mutate(uF_fix_lo  = Fx2Lx(uF_fix_lo,  R_sun), .before=grp1_counts) |> 
        mutate(uF_fix_hi  = Fx2Lx(uF_fix_hi,  R_sun), .before=grp1_counts) |> 
        
        # Rename
        rename(uL_free    = uF_free,   
               uL_free_lo = uF_free_lo,
               uL_free_hi = uF_free_hi,
               uL_fix     = uF_fix   ,
               uL_fix_lo  = uF_fix_lo,
               uL_fix_hi  = uF_fix_hi) |>
        
        # Add band info on columns
        rename_with(.fn = ~paste(.,suffix,sep="_"),.cols = all_of(Lxcols))
}

CalcRadius <- function(lx, cen, r_c, r_h, R_sun) {
    pos <- lx[,c("RAPOS", "DECPOS")] %>% `colnames<-`(c('ra','dec'))
    lx |> 
        mutate(angsec = apply(pos, 1, function(position, center) 
            rad2arcsec(Angdist(a=position, b=center)), center=cen), .after = DECPOS) |> 
        mutate(`phy(pc)` = Phydist(angsec, R_sun), .after = DECPOS) |> 
        mutate(rhr    = angsec/(r_h*60), .after = DECPOS) |> 
        mutate(rcr    = angsec/(r_c*60), .after = DECPOS)
}

get.diffcols <- function(lx, common_col) {
    lx |> select(-all_of(common_col))
}

get.glvary.col <- function(fluxdir, col.name, func) {
    #########################################################
    # col.name: SRC_VAR_ODDS / SRC_VAR_PROB / SRC_VAR_INDEX #
    #########################################################
    
    # Get file names: "{model_name}_obi###_{band}.flux"
    flux.obis <- grep(list.files(path = fluxdir), pattern="obi*", invert=FALSE, value=TRUE)
    if ( length(flux.obis) == 0 ) { # This means there is only one observation, so thus no obi* file.
        flux.obis <- grep(list.files(path = fluxdir), pattern="obi*", invert=TRUE, value=TRUE)
        
        # Store data
        obis <- lapply(flux.obis, function(file) {
            fits <- readFITS(paste(fluxdir, file, sep='/'))
            names(fits$col) <- fits$colNames
            list.cbind(fits$col) %>% as.data.frame() %>% distinct(COMPONENT, .keep_all=TRUE)
        })
        names(obis) <- flux.obis
        
        # Store meta info: obi, band for each file
        metas <- lapply( flux.obis, function(file) {
            band <- strsplit( strsplit( file, split = '_' )[[1]][2], split = '.flux' )[[1]][1]
            list('band' = band)
        } )
        names(metas) <- flux.obis
        metas.df <- melt(metas) %>% dcast(L1 ~ L2)
        colnames(metas.df) <- c('name', 'band')
        
        # Re-construct data into the listed data frame
        obi.list <- list()
        for (i in seq(nrow(metas.df))) {
            name <- metas.df[i,'name']
            band <- metas.df[i,'band']
            obi.list[[band]] <- obis[[name]][,col.name]
        }
        source_by_obi_per_band <- obi.list %>% 
            lapply(as.numeric) %>%
            list.cbind() %>% 
            as.data.frame()
        
    } else {
        # Store data
        obis <- lapply(flux.obis, function(file) {
            fits <- readFITS(paste(fluxdir, file, sep='/'))
            names(fits$col) <- fits$colNames
            list.cbind(fits$col) %>% as.data.frame() %>% distinct(COMPONENT, .keep_all=TRUE)
        })
        names(obis) <- flux.obis
        
        # Store meta info: obi, band for each file
        metas <- lapply( flux.obis, function(file) {
            obi  <- strsplit( file, split = '_' )[[1]][2]
            band <- strsplit( strsplit( file, split = '_' )[[1]][3], split = '.flux' )[[1]][1]
            list('obi' = obi, 'band' = band)
        } )
        names(metas) <- flux.obis
        metas.df <- melt(metas) %>% dcast(L1 ~ L2)
        colnames(metas.df) <- c('name', 'band', 'obi')
        
        # Re-construct data into the listed data frame
        obi.list <- list()
        for (i in seq(nrow(metas.df))) {
            name <- metas.df[i,'name']
            band <- metas.df[i,'band']
            obi  <- metas.df[i,'obi']
            obi.list[[band]][[obi]] <- obis[[name]][,col.name]
        }
        
        source_by_obi_per_band <- obi.list %>% 
            lapply( bind_cols ) %>% 
            lapply( function(band) apply(band, 2, as.numeric) %>% as.data.frame() ) %>%
            lapply(function(band) apply(band, 1, func)) %>%
            bind_cols()
    }
    
    return(source_by_obi_per_band)
}
# ==============================================================================
# =============================== Main function ================================
main <- function(GCname, fluxdir, vary, label_column, signif_column) {
    # Searching parameters in Harris catalog (2010)
    GCCAT_dir <- system("echo $xrbgc", intern=TRUE)
    GCCAT <- read.csv(paste0(GCCAT_dir,"/HarrisCAT/Harris_CAT.csv"))
    
    # Logical condition that matching given GCname and one in Harris catalog (2010)
    condition <- 
        str_detect(GCCAT$ID,   regex(paste("^",GCname,"$",sep=''), ignore_case=TRUE)) | 
        str_detect(GCCAT$Name, regex(paste("^",GCname,"$",sep=''), ignore_case=TRUE))
    if ( any(condition) ) {
        message("├▶ ", GCname, " is found in Harris catalog (2010)")
    } else {
        stop("(Error) There is no ",GCname," in Harris catalog (2010)")
    }
    
    # Read catalog data ----
    RA_cen  <- filter(GCCAT, condition)[,"RA"]  |> hms2deg()      # Position in degree
    DEC_cen <- filter(GCCAT, condition)[,"DEC"] |> dms2deg()      # Position in degree
    r_c     <- filter(GCCAT, condition)[,"r_c"] |> as.numeric()   # r_c in arcmin
    r_h     <- filter(GCCAT, condition)[,"r_h"] |> as.numeric()   # r_h in arcmin
    R_sun   <- filter(GCCAT, condition)[,"R_Sun"] |> as.numeric() # R_sun in kpc
    
    #Parameter checking ----
    message("├▶ Parameters from Harris catalog...")
    parameter_from_Harris <- c("RA_cen", "DEC_cen", "r_c", "r_h", "R_sun")
    for (param in parameter_from_Harris) {
        missingParam(GCname, param)
    }
    
    # Load data  ----
    message('├▶ Loading flux data')
    flux.files <- grep(list.files(path = fluxdir), pattern="*obi*", invert=TRUE, value=TRUE)
    tables <- lapply(flux.files, function(file) suppressWarnings(read.fits(paste(fluxdir, file, sep='/'))))
    names(tables) <- lapply(tables, comment) |> unlist()
    
    # Pre-process for .flux files ----
    message('├▶ Pre-processing flux data')
    fluxes <- lapply(tables, PreProcFlux)
    
    # Calculate Luminosity ----
    message('├▶ Calculating luminosity')
    Lxs <- lapply(fluxes, ProcLum, R_sun=R_sun)
    
    # Add Radius ----
    Lxs_radius <- lapply(Lxs, CalcRadius, 
                         cen=c("ra"=RA_cen, "dec"=DEC_cen),
                         r_c=r_c, r_h=r_h, R_sun=R_sun)
    
    Lxs_colnames <- lapply(Lxs_radius, colnames)
    common_cols  <- intersect(Lxs_colnames[[1]],Lxs_colnames[[2]])
    
    # Combine different energy bands ----
    Lx_df <- bind_cols(Lxs_radius$`0.3-7.0` |> select( all_of(common_cols)),
                       lapply(Lxs_radius, get.diffcols, common_col=common_cols))
    comment(Lx_df) <- NULL
    
    # Get variability ----
    if (vary) {
        message('├▶ Adding variability info')
        var_max <- get.glvary.col(fluxdir, 'SRC_VAR_PROB', max)    # Maximum variability
        var_min <- get.glvary.col(fluxdir, 'SRC_VAR_PROB', min)    # Minimum variability
        var_med <- get.glvary.col(fluxdir, 'SRC_VAR_PROB', median) # Median variability
        colnames(var_max) <- paste("var_max",colnames(var_max),sep="_")
        colnames(var_min) <- paste("var_min",colnames(var_min),sep="_")
        colnames(var_med) <- paste("var_med",colnames(var_med),sep="_")
        Lx_df <- bind_cols(Lx_df, var_max, var_min, var_med)
    }
    
    # Load label information ----
    if (is.null(matched.file)) {
        message('├▶ Labels are not given')
        labels <- NA
    } else {
        message('├▶ Adding label info')
        labels <- read.csv(matched.file)[,label_column]
        Lx_df[,label_column] <- labels
    }
    
    if (is.null(signif.file)) {
        message('├▶ Signifs are not given')
    } else {
        message('├▶ Adding sigma info')
        sigmas <- read.csv(signif.file)[,signif_column]
        Lx_df[,"SRC_SIGNIFICANCE"] <- sigmas
    }
    
    Lx_df <- Lx_df |> relocate(all_of(c(label_column,"SRC_SIGNIFICANCE")), .before=RAPOS)
    
    
    # Save data frame ----
    if (is.null(outfile)) {
        ff <- paste('DataSet_', gsub(" ","",GCname), '.csv', sep='')
        write.csv(Lx_df, file = ff, row.names = F)
        message("└▶ ", ff, " is saved in: ", getwd(), sep='')
        message("*** IMPORTANT: DO NOT CHANGE DataSet file name as input data for classification!")
    } else {
        ff <- paste(outfile,'_',gsub(" ","",GCname),'.csv',sep='')
        message("└▶ ", ff, " is saved in: ", getwd(), sep='')
    }
    print(tibble(Lx_df))
}
# ==============================================================================

# Run main function
main(GCname, fluxdir, vary, label_column, signif_column)
